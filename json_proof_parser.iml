Imandra.add_plugin_yojson () ;;

module JSONProofParser = struct
    let (>>=) = Result.(>>=)

    let parse_bound_type = function
        | `String "U" -> Ok UPPER
        | `String "L" -> Ok LOWER
        | _   -> Error "invalid split type"

    let parse_list (parse_elem: YJ.t -> ('a, 'b) result) (l: YJ.t) : ('a list, string) result = 
        match l with
        | `List l' -> Result.extract_list (List.map parse_elem l')
        | _ -> Error "invalid list"

    let parse_int (i: YJ.t) : (Z.t, string) result = 
        match i with
        | `Int i' -> Ok (Z.of_int i')
        | _ -> Error "invalid int"

    let parse_float (f: YJ.t): (real, string) result = 
        match f with 
        | `Float f' -> Ok (Q.of_float f')
        | _ -> Error ("invalid float ")

    let parse_sparse_matrix (m: YJ.t): ((('a, 'b) Iter_map.t list, 'c) result) = 
        let parse_entry e = match e with
            | `Assoc [
                ("var", i);
                ("val", f)
            ] -> let var = parse_int i in
                let value = parse_float f in
                Result.bind2 (fun v w -> Ok (v, w)) var value
            | _ -> Error ("invalid matrix entry ")
        in
        let list_res: ((Z.t * real) list list, string) result = parse_list (parse_list parse_entry) m in
        let f:  (Z.t * real) list list -> (Z.t, real) Iter_map.t list = List.map (Iter_map.of_list) in
        list_res >>= (fun l -> Ok (f l))

    let parse_dictionary (d: YJ.t) =
        let parse_elem (acc, count)  (el: YJ.t) = 
            let el' = parse_float el in
            let res = Result.bind2 (fun e a -> Ok (Iter_map.add count e a)) el' acc in
            (res, count + 1)
        in
        match d with
            (* use result type and return error as default *)
            | `List d' -> let (res, _) = List.fold_left parse_elem (Ok (Iter_map.empty), 0) d' in
                res
            | _ -> Error "invalid dictionary entry (bounds list)"

    let parse_constraint_type (c: YJ.t) =
    (parse_int c) >>= (fun x -> match Constraint.constraint_type_of_int x with
        | UNDEFINED -> Error "unknown activation function"
        | t -> Ok t
        )

    let parse_constraint (c: YJ.t) = 
        match c with
        | `Assoc [
            ("constraintType", constraint_type);
            ("vars", vars_list);
        ] -> let constraint_type' = parse_constraint_type constraint_type in
            let vars = parse_list parse_int vars_list in
            Result.bind2 (fun a b -> Ok (a, b)) constraint_type' vars
        | _ -> Error "invalid constraint"

    let parse_split (s: YJ.t): (Split.t, string) result = 
        match s with
        | `Assoc [
            ("var", i); 
            ("val", f); 
            ("bound", c)
        ] -> 
            Result.bind3 (fun var value split_type -> Ok (var, value, split_type)) 
                (parse_int i) 
                (parse_float f) 
                (parse_bound_type c)
        | _ -> Error ("invalid split: " ^ (YJ.show s))

    let parse_bound_lemma (b: YJ.t) = 
        match b with 
        | `Assoc [
            ("affVar", aff_var);
            ("affBound", aff_bound);
            ("bound", bound);
            ("causVar", caus_var);
            ("causBound", caus_bound);
            ("constraint", constrnt);
            ("expl", expl);
        ] -> let aff_var' = parse_int aff_var in
            let aff_bound' = parse_bound_type aff_bound in
            let bound' = parse_float bound in
            let caus_var' = parse_int caus_var in
            let caus_bound' = parse_bound_type caus_bound in
            let constrnt' = parse_constraint_type constrnt in
            let expl' = parse_dictionary expl in
            Result.bind7 (fun a b c d e f g -> Ok (BoundLemma.Full (a, b, c, d, e, f, g))) aff_var' aff_bound' bound' caus_var' caus_bound' constrnt' expl'
        | `Assoc [
            ("affVar", i);
            ("affBound", s);
            ("bound", f)
        ] -> let affVar = parse_int i in
            let affBound = parse_bound_type s in
            let bound = parse_float f in
            Result.bind3 (fun a b c -> Ok (BoundLemma.Short (a, b, c))) affVar affBound bound

        | _ -> Error "invalid bound lemma"

    let rec parse_node (p: YJ.t): (ProofTree.t, string) result =
        match p with
        (* node without lemmas *)
        | `Assoc [
            ("split", split_list); 
            ("children", children);
            ] -> let splits = parse_list parse_split split_list in
                let lemmas = Ok [] in
                let children = parse_list parse_node children in
                Result.bind3 (fun s b c -> Ok (ProofTree.Node (s, b, c))) splits lemmas children
        (* node with lemmas *)
        | `Assoc [
            ("split", split_list); 
            ("lemmas", lemma_list);
            ("children", children);
            ] -> let splits = parse_list parse_split split_list in
                let lemmas = parse_list parse_bound_lemma lemma_list in
                let children = parse_list parse_node children in
                Result.bind3 (fun s b c -> Ok (ProofTree.Node (s, b, c))) splits lemmas children
        (* leaf with lemmas *)
        | `Assoc [
            ("split", split_list); 
            ("lemmas", lemma_list);
            ("contradiction", contra); 
            ] -> let splits = parse_list parse_split split_list in
                let lemmas = parse_list parse_bound_lemma lemma_list in
                let contra' = parse_dictionary contra in 
                Result.bind3 (fun s b c -> Ok (ProofTree.Leaf (s, b, c))) splits lemmas contra'
        (* leaf without lemmas *)
        | `Assoc [
            ("split", split_list); 
            ("contradiction", contra); 
            ] -> let splits = parse_list parse_split split_list in
                let lemmas = Ok [] in
                let contra' = parse_dictionary contra in 
                Result.bind3 (fun s b c -> Ok (ProofTree.Leaf (s, b, c))) splits lemmas contra'
        | _ -> Error ("invalid node " ^ (YJ.show p))


    let parse_root (r: YJ.t) = 
        match r with
        (* node without lemmas *)
        | `Assoc [
            ("children", children);
            ] -> let splits = Ok [] in
                let lemmas = Ok [] in
                let children = parse_list parse_node children in
                Result.bind3 (fun s b c -> Ok (ProofTree.Node (s, b, c))) splits lemmas children
        (* node with lemmas *)
        | `Assoc [
            ("lemmas", lemma_list);
            ("children", children);
            ] -> let splits = Ok [] in
                let lemmas = parse_list parse_bound_lemma lemma_list in
                let children = parse_list parse_node children in
                Result.bind3 (fun s b c -> Ok (ProofTree.Node (s, b, c))) splits lemmas children
        (* leaf with lemmas *)
        | `Assoc [
            ("lemmas", lemma_list);
            ("contradiction", contra); 
            ] -> let splits = Ok [] in
                let lemmas = parse_list parse_bound_lemma lemma_list in
                let contra' = parse_dictionary contra in 
                Result.bind3 (fun s b c -> Ok (ProofTree.Leaf (s, b, c))) splits lemmas contra'
        (* leaf without lemmas *)
        | `Assoc [
            ("contradiction", contra); 
            ] -> let splits = Ok [] in
                let lemmas = Ok [] in
                let contra' = parse_dictionary contra in 
                Result.bind3 (fun s b c -> Ok (ProofTree.Leaf (s, b, c))) splits lemmas contra'
        | _ -> Error ("invalid root node " ^ (YJ.show r))

    let parse_proof (p: YJ.t) = 
        match p with 
        | `Assoc [
            ("tableau", tableau);
            ("upperBounds", upper_bounds);
            ("lowerBounds", lower_bounds);
            ("constraints", constraints);
            ("proof", proof_tree)
        ] -> let tableau' = parse_sparse_matrix tableau in
            let upper_bounds' = parse_dictionary upper_bounds in
            let lower_bounds' = parse_dictionary lower_bounds in
            let constraints' = parse_list parse_constraint constraints in
            let proof_tree' = parse_root proof_tree in
            Result.bind5 (fun a b c d e -> Ok (a, b, c, d, e)) tableau' upper_bounds' lower_bounds' constraints' proof_tree'  
        | _ -> Error "invalid proof "
end [@@program]

(* let proof_json = YJ.from_file "json/single_node.json";; *)

(* #logic;; *)