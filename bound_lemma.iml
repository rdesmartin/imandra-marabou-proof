module BoundLemma = struct
    (* affected variable, affected bound type, bound value, causing variable, causing bound type, constraint type, explanation *)     
    type t = 
    | Full of int * bound_type * real * int * bound_type * constraint_type * (int, real) Iter_map.t
    | Short of int * bound_type * real

    let to_tightening l = match l with
        | Full (var, bound_t, value, _, _, _, _) -> (var, value, bound_t)
        | Short (var, bound_t, value) -> (var, value, bound_t)

    let to_string l = match l with
        | Full (aff_var, aff_bound_t, value, caus_var, caus_bound_t, constr_t, expl) -> 
            Printf.sprintf "aff_var: %d, aff_bound_t: %d, value: %f, caus_var: %d, caus_bound_t: %d \n" 
                (Z.to_int aff_var) 
                (bound_type_to_int aff_bound_t) 
                (Q.to_float value) 
                (Z.to_int caus_var)
                (bound_type_to_int caus_bound_t)
        | Short (var, bound_t, value) ->
            Printf.sprintf "aff_var: %d, aff_bound_t: %d, value: %f \n"
                (Z.to_int var) 
                (bound_type_to_int bound_t) 
                (Q.to_float value) 
    [@@program]

    let print l = match l with
        | Full (aff_var, aff_bound_t, value, caus_var, caus_bound_t, constr_t, expl) -> 
            Printf.printf "aff_var: %d, aff_bound_t: %d, value: %f, caus_var: %d, caus_bound_t: %d \n" 
                (Z.to_int aff_var) 
                (bound_type_to_int aff_bound_t) 
                (Q.to_float value) 
                (Z.to_int caus_var)
                (bound_type_to_int caus_bound_t)
        | Short (var, bound_t, value) ->
            Printf.printf "aff_var: %d, aff_bound_t: %d, value: %f \n"
                (Z.to_int var) 
                (bound_type_to_int bound_t) 
                (Q.to_float value) 
    [@@program]
        
end