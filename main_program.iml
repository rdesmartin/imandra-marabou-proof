#program;;
let () = System.use "result.iml";;
let () = System.use "utils.iml";;
let () = System.use "iter_map.iml";;

let () = System.use "split.iml";;
let () = System.use "matrix.iml";;
let () = System.use "constraint.iml";;
let () = System.use "bound_lemma.iml";;
let () = System.use "proof_tree.iml";;
let () = System.use "json_proof_parser.iml";;
let () = System.use "checker.iml";;

let tiny1 = "json/tinyJsonProof1.json"
let tiny1_lemma = "json/tinyJsonProof1_Lemmas.json" (* ~70 Mb *)

let tiny2 = "json/tinyJsonProof2.json"
let tiny2_lemma = "json/tinyJsonProof2_Lemmas.json" (* ~800 Mb *)

let tiny3 = "json/tinyJsonProof3.json"
let tiny3_lemma = "json/tinyJsonProof3_Lemmas.json" (* ~500 Mb *)

let tiny4 = "json/tinyJsonProof4.json"
let tiny4_lemma = "json/tinyJsonProof4_Lemmas.json" (* ~800 Mb *)

let tiny5 = "json/tinyJsonProof5.json"
let tiny5_lemma = "json/tinyJsonProof5_Lemmas.json" (* ~800 Mb *)

let small = "json/smallJsonProof.json"
let small_lemma = "json/smallJsonProof_Lemmas.json" (* ~70 Mb *)

let small2 = "json/smallJsonProof2.json"
let small2_lemma = "json/smallJsonProof2_Lemmas.json" (* ~800 Mb *)

let small3 = "json/smallJsonProof3.json"
let small3_lemma = "json/smallJsonProof3_Lemmas.json" (* ~500 Mb *)

let small4 = "json/smallJsonProof4.json"
let small4_lemma = "json/smallJsonProof4_Lemmas.json" (* ~800 Mb *)

let small5 = "json/smallJsonProof5.json"
let small5_lemma = "json/smallJsonProof5_Lemmas.json" (* ~800 Mb *)

let small6 = "json/smallJsonProof6.json"
let small6_lemma = "json/smallJsonProof6_Lemmas.json" (* ~800 Mb *)


let medium = "json/mediumJsonProof.json"
let medium2 = "json/mediumJsonProof2.json"

let large = "json/largeJsonProof.json"

let load_proof file_name =
    let proof_json = YJ.from_file file_name in
    JSONProofParser.parse_proof proof_json
    [@@program];;

let rec print_leaf' (n: ProofTree.t) = 
    match n with
    | ProofTree.Node (_, _, (child::_)) -> print_leaf' child
    | ProofTree.Node (_, _, []) -> []
    | ProofTree.Leaf (_, _, contradiction) -> contradiction

let print_leaf file_name = 
    let proof_res = load_proof file_name in
    match proof_res with
    | Ok (_, _, _, _, proof_tree) -> print_leaf' proof_tree        
    | Error e -> []


let get_tableau file_name = 
    let proof_res = load_proof file_name in
    match proof_res with
    | Ok (tableau, _, _, _, _) -> tableau        
    | Error e -> []


let main file_name =
    let proof_res = load_proof file_name in
    match proof_res with
    | Ok (tableau, upper_bounds, lower_bounds, constraints, proof_tree) -> 
        check_root tableau upper_bounds lower_bounds constraints proof_tree
    | Error e -> false
