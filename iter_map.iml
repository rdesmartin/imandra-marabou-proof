module Iter_map = struct

  type ('a,'b) t = {
    map: ('a,'b) Map.t;
    keys: 'a list;
  }

  let rec insert k ks =
    match ks with
    | [] -> [k]
    | k' :: ks' ->
      if k=k' then ks
      else if k < k' then k :: ks
      else k' :: insert k ks'

  let add k v m =
    { map = Map.add k v m.map;
      keys = insert k m.keys }

  let get k m = Map.get k m.map

  let rec of_list ~default xs =
    match xs with
    | [] -> { map = Map.const default;
              keys = [] }
    | (k,v)::xs ->
      let m = of_list ~default xs in
      add k v m

  let const c = of_list ~default:c [] 

end

module Iter_map_lemmas = struct

  module M = Iter_map

  lemma map_get_add_id m k v =
    M.get k (M.add k v m) = v
  [@@auto] [@@rw]

  lemma insert_stable k x ks =
    List.mem x ks ==> List.mem x (M.insert k ks)
  [@@auto] [@@rw]

  lemma insert_inserts k ks =
    List.mem k (M.insert k ks)
  [@@auto] [@@rw]

  lemma map_key_mem m k v =
    List.mem k (Iter_map.add k v m).keys
  [@@auto] [@@rw]

end