module M = Iter_map

let is_bounded (x: (int, real) M.t) upper_bounds lower_bounds = 
    let rec f keys =
        match keys with 
        | [] -> true
        | k::ks -> let value = M.get k x in
            let upper_bound = M.get k upper_bounds in   
            let lower_bound = M.get k lower_bounds in
            if value >=. lower_bound && value <=. upper_bound
            then f ks
            else false
    in
    f x.keys

let rec dot_product' x_keys x  y = 
        match x_keys with 
        | [] -> 0.
        | key::tl -> (M.get key x) *. (M.get key y) +. (dot_product' tl x y)

let dot_product (x: (int, real) M.t) (y: (int, real) M.t) = dot_product' x.keys x y      

axiom dot_product'_symmetry (x: (int, real) M.t) (y: (int, real) M.t) =
    dot_product' x.keys x y = dot_product' y.keys y x
    [@@auto][@@rw]

axiom dot_product_symmetry (x: (int, real) M.t) (y: (int, real) M.t) =
    dot_product x y = dot_product y x
    [@@auto][@@rw]

let rec null_product (tableau: (int, real) M.t list) (x: (int, real) M.t) =
    match tableau with 
    | [] -> true
    | row::tl -> dot_product row x = 0. && (null_product tl x)

lemma zero_dot_product_r x tableau row =
    dot_product row x = 0. && null_product tableau x 
    ==> null_product (tableau @ [row]) x = true
[@@auto][@@rw]

lemma zero_dot_product_l x tableau row =
    dot_product row x = 0. && null_product tableau x 
    ==> null_product (row::tableau) x = true
[@@auto][@@rw]

axiom kernel_vector_for_any_combination tableau x y =
    null_product tableau x 
    ==> dot_product x (compute_combination y tableau (M.empty)) = 0.
[@@auto][@@rw]

#disable dot_product;;

axiom bounds_combination row x upper_bounds lower_bounds c =
    compute_row_upper_bound row upper_bounds lower_bounds = c
    <==> (is_bounded x upper_bounds lower_bounds
         && dot_product x row <=. c) = true

lemma contradiction_implies_negative_row (x: (int, real) M.t) (y: real list) (tableau: (int, real) M.t list) upper_bounds lower_bounds = 
         check_contradiction y tableau upper_bounds lower_bounds  
         <==> (is_bounded x upper_bounds lower_bounds
         && dot_product x y <. 0) = true
     [@@auto]

(* lemma contradiction_implies_negative_row (x: (int, real) M.t) (y: real list) (tableau: (int, real) M.t list) upper_bounds lower_bounds = 
    (check_contradiction y tableau upper_bounds lower_bounds [@trigger rw] &&
     is_bounded x upper_bounds lower_bounds) ==>
    dot_product x (compute_combination y tableau (M.empty)) <. 0. = true
[@@auto] [@@rw] *)

(*axiom dot_product_check_contradiction_eq (x: (int, real) M.t) (y: real list) (tableau: (int, real) M.t list) upper_bounds lower_bounds =
    (is_bounded x upper_bounds lower_bounds && 
    dot_product x.keys x (compute_combination y tableau (M.const 0.)) <. 0. [@trigger rw]) ==>
    check_contradiction y tableau upper_bounds lower_bounds = true
[@@rw]

axiom a1 (x: (int, real) M.t) (y: real list) (tableau: (int, real) M.t list) = 
    dot_product x.keys x (compute_combination y tableau (M.const 0.)) = 0. ==> 
    (dot_product x.keys x (compute_combination y tableau (M.const 0.)) <. 0.) = false
[@@rw]

lemma l3 (x: (int, real) M.t) (y: real list) (tableau: (int, real) M.t list) upper_bounds lower_bounds =
    (null_prod tableau x [@trigger rw]) && is_bounded x upper_bounds lower_bounds ==> 
    (check_contradiction y tableau upper_bounds lower_bounds) = false
[@@simp]
[@@auto]
[@@disable null_prod, dot_product, check_contradiction, is_bounded, M.const] 
[@@rw]



theorem contradiction_verification x contradiction tableau upper_bounds lower_bounds =
    is_bounded x upper_bounds lower_bounds && 
    check_contradiction contradiction tableau upper_bounds lower_bounds ==>
    not (null_prod tableau x)
    [@@auto] *)