type bound_type = UPPER | LOWER

let bound_type_to_bool = function
    | UPPER -> true
    | LOWER -> false

let bound_type_to_int = function
    | UPPER -> 1i
    | LOWER -> 0i [@@program]

type constraint_type =
    | RELU
    | MAX
    | SIGN
    | DISJUNCTION
    | ABSOLUTE_VALUE
    | UNDEFINED

let all (l: bool list) = List.fold_left (fun x y -> x && y) true l

(* let print_list l = List.map (fun el -> let () = Printf.printf "%f; " (Q.to_float el) in el) l *)

module List = struct
    include List

    let rec repeat x n =
        if n <= 0
        then
            []
        else
            x::(repeat x (n - 1))
end

(* set list element at given index to x *)
(* TODO: handle error cases *)
let rec set_nth (l: real list) (n: int) (x: real) =
    if n < 0 || n >= List.length l
        then (* let () = Printf.printf "n: %d, list length: %d\n" (Z.to_int n) (Z.to_int @@ List.length l) in *) []
    else if n = 0
    then
        match l with
        | [] -> []
        | hd::tl -> x::tl
    else
        match l with
        | [] -> []
        | hd::tl -> hd::(set_nth tl (n-1) x)

(* increment list element at given index by 1 *)
(* TODO: handle error cases *)
let rec increment_elem (l: real list) (n: int) =
    if (n < 0) || (n >= List.length l)
        then []
    else if (n = 0)
    then
        match l with
        | [] -> []
        | hd::tl -> (hd +. 1.)::tl
    else
        match l with
        | [] -> []
        | hd::tl -> hd::(increment_elem tl (n-1))
