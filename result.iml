module Result = struct
    include Result

    let lift f r = match r with
    | Ok r' -> Ok (f r')
    | Error e -> Error e

    let rec extract_list (l: ('a, 'b) result list) = match l with   (* return: ('a list, 'b) result *)
    | [] -> Ok []
    | (Ok x)::tail -> lift (List.cons x) (extract_list tail)
    | (Error msg)::tail -> Error msg

    let bind2 (f: 'a -> 'b -> ('c, 'e) result) (x: ('a, 'e) result) (y: ('b, 'e) result) =
        match x, y with
        | Ok x', Ok y' -> f x' y'
        | Error e, _ | _, Error e -> Error e

    let bind3 (f: 'a -> 'b -> 'c -> ('d, 'e) result) (x: ('a, 'e) result) (y: ('b, 'e) result) (z: ('c, 'e) result) =
        match x, y, z with
        | Ok x', Ok y', Ok z' -> f x' y' z'
        | Error e, _, _ | _, Error e, _ | _, _, Error e -> Error e

end [@@program]